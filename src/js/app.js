App = {
  web3Provider: null, // An undefined object to store the web3 provider, that can be used anywhere in App
  contracts: {},  // An empty dictinary to save contracts, that can be used anywhere in App object
  // An array storing texts for clearing types
  clearingTypes: ["Error","Marginal Seller","Marginal Buyer","Exact","Null"],

  init: async function() {
    // Call an asynchronous function to init web3
    return await App.initWeb3();  
  },

  // The asynchronous function to init web3
  initWeb3: async function() {
    // MetaMask injects a global API into websites visited by its users at window.ethereum. 
    // This API allows websites to request users' Ethereum accounts
    // Read data from blockchains the user is connected to
    // Suggest that the user sign messages and transactions
    App.web3Provider = window.ethereum;
    // Request accounts in MetaMask to connect to the web3 website
    await window.ethereum.request({ method: "eth_requestAccounts" });
    web3 = new Web3(App.web3Provider);  // Init web3

    return App.initContract();
  },

  // Get the necessary contract artifact file and instantiate it with @truffle/contract
  initContract: function() {

      // Load JSON-encoded data from the server using a GET HTTP request
      $.getJSON('DoubleAuction.json', function(data) {  
      // A variable to store the data imported from JSON generated by compiling DoubleAuction contract
      var AuctionArtifact = data; 
      App.contracts.Auction = TruffleContract(AuctionArtifact); // Using truffle to instantiate contract artifact
    
      // Set the provider for our contract
      App.contracts.Auction.setProvider(App.web3Provider);  // Set the provider for our contract
    });

    return App.bindEvents();
  },

  bindEvents: function() {
    // Binding buyer bid button on the UI to the function App.handleBuyerBid
    $(document).on('click', '.btn-BuyerBid', App.handleBuyerBid);
    // Binding seller bid button on the UI to the function App.handleSellerBid
    $(document).on('click', '.btn-SellerBid', App.handleSellerBid);
    // Binding Market Clearing button on the UI to the function App.handleSellerBid
    $(document).on('click', '.btn-marketClearing', App.handlemarketClearing);
    // Binding Clear All button on the UI to the function App.handleClearAll
    $(document).on('click', '.btn-ClearAll', App.handleClearAll);
    // Binding get refund button on the UI to the function App.handleMakePayment
    $(document).on('click', '.btn-buyer-MakePayment', App.handleMakePayment);
    // Binding get payment button on the UI to the function App.handleMakePayment
    $(document).on('click', '.btn-seller-MakePayment', App.handleMakePayment);
  },

  // Bridging BuyerBid method in the smart contract back-end and buyer bid button on the front-end UI
  handleBuyerBid: function(event) {
    event.preventDefault(); //Prevent the default event of the button

    var auctionInstance;  // A variable to save smart contract instance

    web3.eth.getAccounts(function(error, accounts) { // Get accounts in web3
      if (error) {
        window.alert(error);  // Alert if there is any exception
      }

      var account = accounts[0];  // The selected account in MetaMask will be store in variable account

      App.contracts.Auction.deployed().then(function(instance) {  // Check whether the contract has been deployed
        auctionInstance = instance; // Store the obtained instance in the actionInstance variable, so that the rest of the asynchronous functions can also call the instance
        var price = $(".input-buyer-Price").val(); // Using class attribute to get a input element, load the value in it and save to variable price
        var quantity = $(".input-buyer-Quantity").val();  // Using class attribute to get a input element, load the value in it and save to variable quantity
        var regPos = /^[1-9]\d*$/; // A reg expression to judge whether the input is positive integer
        if(regPos.test(price)&&regPos.test(quantity))
        {
          // Sending transaction using BuyerBid function
          // Pay the price * quantity ether to the smart contract while providing the necessary parameters for the smart contract to operate: account address, quantity, price
          // Set the gas limit to 2100000 to prevent execution failure due to low gas limit
          return auctionInstance.BuyerBid(account, quantity, price, {from: account, value: web3.toWei(price*quantity, 'ether'), gas: 2100000});
        }
        else
        {
          window.alert("Please enter positive integer. ");  // Alert if the input is invalid
        }
        }
      ).catch(function(err) {
        window.alert(err.message);  // Alert if there is any exception
      });
    });
  },

  // Bridging SellerBid method in the smart contract back-end and seller bid button on the front-end UI
  handleSellerBid: function(event) {
    event.preventDefault(); //Prevent the default event of the button

    var auctionInstance;  // A variable to save smart contract instance

    web3.eth.getAccounts(function(error, accounts) {  // Get accounts in web3
      if (error) {
        window.alert(error);  // Alert if there is any exception
      }

      var account = accounts[0];  // The selected account in MetaMask will be store in variable account

      App.contracts.Auction.deployed().then(function(instance) {  // Check whether the contract has been deployed
        auctionInstance = instance; // Store the obtained instance in the actionInstance variable, so that the rest of the asynchronous functions can also call the instance
        var price = $(".input-seller-Price").val();  // Using class attribute to get a input element, load the value in it and save to variable price
        var quantity = $(".input-seller-Quantity").val();  // Using class attribute to get a input element, load the value in it and save to variable quantity
        var regPos = /^[1-9]\d*$/; // A reg expression to judge whether the input is positive integer
        if(regPos.test(price)&&regPos.test(quantity))
        {
          // Sending transaction using SellerBid function
          // Only need to providing the necessary parameters for the smart contract to operate here. Do not have to pay the etherum
          // Set the gas limit to 2100000 to prevent execution failure due to low gas limit
          return auctionInstance.SellerBid(account, quantity, price, {from: account, gas: 2100000});
        }
        else
        {
          window.alert("Please enter positive integer. ");  // Alert if the input is invalid
        }
      }).catch(function(err) {
        window.alert(err.message);  // Alert if there is any exception
      });
    });
  },

  // Bridging marketClearing method in the smart contract back-end and Market Clearing button on the front-end UI
  // It also updates the display of Clearing Price, Clearing Quantity and Clearing Type
  handlemarketClearing: function(event) {
    event.preventDefault(); //Prevent the default event of the button

    var auctionInstance;  // A variable to save smart contract instance

    web3.eth.getAccounts(function(error, accounts) {  // Get accounts in web3
      if (error) {
        window.alert(error);  // Alert if there is any exception
      }

      var account = accounts[0];  // The selected account in MetaMask will be store in variable account

      App.contracts.Auction.deployed().then(function(instance) {  // Check whether the contract has been deployed
        auctionInstance = instance; // Store the obtained instance in the actionInstance variable, so that the rest of the asynchronous functions can also call the instance
        // Sending transaction using marketClearing function
        return auctionInstance.marketClearing({from: account});
      
    }).then(function(){
      // Sending transaction using clearingInfo function, to get the values in clearingInfo structure in the contract
      return auctionInstance.clearingInfo();
    }).then(function(clearingInfo){
      // Get a td element by class attribute
      // Using the first value in clearingInfo structure (which is an array now in JavaScript) to update the text of the td element associated with Clearing Quantity
      $(".td-ClearingQuantity").html(String(clearingInfo[0]));
      // Similarly Using the second value in clearingInfo structure to update the text of the td element associated with Clearing Price
      $(".td-ClearingPrice").html(String(clearingInfo[1]));
      // Use the third value of clearingInfo to look up the table defined in the App object, find the corresponding market type and update the text in the td element associated with Clearing Type
      $(".td-ClearingType").html(App.clearingTypes[clearingInfo[2]])
    }).catch(function(err) {
        window.alert(err.message);  // Alert if there is any exception
      });
    });
  },

  // Bridging ClearAll method in the smart contract back-end and Clear All button on the front-end UI
  // It also clears the display of Clearing Price, Clearing Quantity and Clearing Type
  handleClearAll: function(event) {
    event.preventDefault(); //Prevent the default event of the button

    var auctionInstance;  // A variable to save smart contract instance

    web3.eth.getAccounts(function(error, accounts) { // Get accounts in web3
      if (error) {
        window.alert(error);  // Alert if there is any exception
      }

      var account = accounts[0];  // The selected account in MetaMask will be store in variable account

      App.contracts.Auction.deployed().then(function(instance) { // Check whether the contract has been deployed
        auctionInstance = instance; // Store the obtained instance in the actionInstance variable, so that the rest of the asynchronous functions can also call the instance
        // Sending transaction using ClearAll function
        return auctionInstance.ClearAll({from: account});
      }).then(function(){
        // Get td elements by their class attributes, and empty their texts
        $(".td-ClearingPrice").html("");
        $(".td-ClearingQuantity").html("");
        $(".td-ClearingType").html("");
      }
      ).catch(function(err) {
        window.alert(err.message);  // Alert if there is any exception
      });

    });
  },

  // Bridging MakePayment method in the smart contract back-end and get payment (for sellers) and get refund (for buyers) button on the front-end UI
  handleMakePayment: function(event) {
    event.preventDefault(); //Prevent the default event of the button

    var auctionInstance; // A variable to save smart contract instance

    web3.eth.getAccounts(function(error, accounts) { // Get accounts in web3
      if (error) {
        window.alert(error);  // Alert if there is any exception
      }

      var account = accounts[0];  // The selected account in MetaMask will be store in variable account

      App.contracts.Auction.deployed().then(function(instance) {  // Check whether the contract has been deployed
        auctionInstance = instance; // Store the obtained instance in the actionInstance variable, so that the rest of the asynchronous functions can also call the instance
        // Sending transaction using MakePayment function
        return auctionInstance.MakePayment({from: account});
      }).catch(function(err) {
        window.alert(err.message);  // Alert if there is any exception
      });

    });
  },

};

$(function() {  // Wait until the page is loaded before starting to execute the function
  $(window).load(function() { // Load a function to the window opened in the browser
    App.init(); // Init the main program
  });
});
